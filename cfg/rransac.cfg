#!/usr/bin/env python
PACKAGE = "visual_mtt"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# INSTRUCTIONS
# Don't use this to set default values. Use yaml files, loaded in launch files.
# This cfg specifies which params are dynamically reconfigurable along with
# bounds. The reconfigure callback needs to recieve these and assign them to
# overwrite the class members.

# entries decoded:
# group.add("strict_param_name", type, level, "Mouseover Description", default, min, max)

# general
general = gen.add_group("General Parameters")
general.add("meas_time_window", double_t, 0, "The duration of time in seconds from the current time stamp extending
                              into the past during which measurements should be considered. All
                              measurements outside of the time window will be discarded. For example: a value of 
                              5 means that all the measurement window is from the current time stamp to 
                              curent time stamp -5 seconds", 0, 0.1, 10)
general.add("transform_consensus_set", bool_t,0,"A flag that indicates if the measurements in the consensus set should
                                    be transformed when a transformation is provided. For faster performance, it is
                                    recommended that this flag is set to false.",False)

# motion model specific parameters
motion = gen.add_group("Motion Model Specific Parameters")
motion.add("covQ_pos", double_t, 0, "The process noise covariance is a diagonal matrix. This value determines the covariance of the portion of the process noise covariance regarding position.", 0, 1e-4, 5)
motion.add("covQ_vel", double_t, 0, "The process noise covariance is a diagonal matrix. This value determines the covariance of the portion of the process noise covariance regarding velocity.", 0, 1e-4, 5)


# cluster parameters
cluster = gen.add_group("Cluster Parameters")
cluster.add("cluster_time_threshold", double_t, 0, "In order for a measurements to be a neighbor to another measurement of a different time stamp, the difference in time
                                              must be less than or equal to  this parameter.", 0, 1e-4, 5)
cluster.add("cluster_velocity_threshold", double_t, 0, "In order for a measurement to be a neighbor to another measurement of a different time stamp, the distance in pose 
                                              normalized by the time difference between the two measurements must be less than or equal to this parameter.", 0, 1e-4, 5)
cluster.add("cluster_position_threshold", double_t, 0, "In order for a measurement to be a neighbor to another measurement of the same time stamp, the distance in pose
                                              must be less than or equal to this parameter.", 0, 1e-4, 5)
cluster.add("cluster_min_size_requirement", int_t, 0, "A cluster must have at least this many measurements before the cluster will be used to initialize a track.", 0, 1, 50)

# RANSAC Parameters (track initializer parameters)
ransac = gen.add_group("RANSAC Parameters")
ransac.add("RANSAC_max_iters", int_t, 0, "The maximum number of RANSAC iterations per run.", 0, 1, 1000)
ransac.add("RANSAC_score_stopping_criteria", int_t, 0, "During any iteration, if the score of a hypothetical state is greater than this, then RANSAC terminates early 
                                                    and creates a new track using the hypothetical state.", 0, 1, 50)
ransac.add("RANSAC_score_minimum_requirement", int_t, 0, " A hypothetical state must have a score greater than or equal to this in order to be made into a track.", 0, 1, 50)
ransac.add("RANSAC_minimum_subset", int_t, 0, "The minimum number of measurements from different time stamps used to generate the hypothetical state estimate. This value must be
                                            greater than or equal to the number of measurements needed to observer the target.", 0, 1, 5)

#Model Manager
model_manager = gen.add_group("Model Manager Parameters")
model_manager.add("track_good_model_threshold", double_t, 0, "A track whose ModelBase::model_likelihood_ is equal to or greater than this parameter, is considered a 
                                               good model; otherwise, it is considered a poor model.", 0, 1e-4, 500)
model_manager.add("track_max_missed_detection_time", double_t, 0, "A track that has not received an associated measurement in the past time in seconds indicated by this parameter
                                               is assumed to be outside the surveillance region of any sensor and will be discarded.", 0, 1e-4, 100)
model_manager.add("track_similar_tracks_threshold", double_t, 0, "The threshold used to determine if two tracks are similar enough to be considered the same. If they are, then they will 
                                               be merged.", 0, 1e-4, 20)
model_manager.add("track_max_num_tracks", int_t, 0, "The maximum number of tracks that RRANSAC will store.", 0, 1, 30)     

#Nonlinear LMLE
model_manager = gen.add_group("Nonlinear LMLE Parameters")
model_manager.add("nonlinear_innov_cov_id", bool_t,0,"When set to true, the innovation covariance will not be calculated in the nonlinear track initialization process.
                                                    This can drastically speed up performance at the cost of accuracy.",False)

exit(gen.generate(PACKAGE, "rransac", "rransac"))