#!/usr/bin/env python
PACKAGE = "visual_mtt2"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# INSTRUCTIONS
# Don't use this to set default values. Use yaml files, loaded in launch files.
# This cfg specifies which params are dynamically reconfigurable along with
# bounds. The reconfigure callback needs to recieve these and assign them to
# overwrite the class members.

# homography
trim = gen.add_group("Homography")
trim.add("TRIM_E", double_t, 0, "Elevator trim", 0, -1, 1)
trim.add("TRIM_A", double_t, 0, "Aileron trim", 0, -1, 1)
trim.add("TRIM_R", double_t, 0, "Rudder trim", 0, -1, 1)
trim.add("TRIM_T", double_t, 0, "Throttle trim", 0.6, 0, 1)
trim.add("param_test", double_t, 0, "test", 0, 0, 1)


# course hold
course = gen.add_group("Course")
course.add("COURSE_KP", double_t, 0, "Course proportional gain", 0.7329, 0, 2)
course.add("COURSE_KD", double_t, 0, "Course derivative gain", 0, -1, 0)
course.add("COURSE_KI", double_t, 0, "Course integral gain", 0.07, 0, 0.2)

# enum example
size_enum = gen.enum([ gen.const("Small",      int_t, 0, "A small constant"),
                       gen.const("Medium",     int_t, 1, "A medium constant"),
                       gen.const("Large",      int_t, 2, "A large constant"),
                       gen.const("ExtraLarge", int_t, 3, "An extra large constant")],
                     "An enum to set size")
gen.add("size", int_t, 0, "A size parameter which is edited via an enum", 1, 0, 3, edit_method=size_enum)

exit(gen.generate(PACKAGE, "visual_frontend", "visual_frontend"))