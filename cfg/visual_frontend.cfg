#!/usr/bin/env python
PACKAGE = "visual_mtt2"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# INSTRUCTIONS
# Don't use this to set default values. Use yaml files, loaded in launch files.
# This cfg specifies which params are dynamically reconfigurable along with
# bounds. The reconfigure callback needs to recieve these and assign them to
# overwrite the class members.

# entries decoded:
# group.add("strict_param_name", type, level, "Mouseover Description", default, min, max)

# homography
homography = gen.add_group("Homography")
info = "Homography RANSAC Inlier Threshold"
homography.add("reprojection_error", double_t, 0, info, 0, 0, 5)

# feature manager
feature_manager = gen.add_group("Feature_Manager")
type_enum = gen.enum([ gen.const("Good_Features_to_Track",          str_t, "GFTT", ""),
                       gen.const("Oriented_FAST_and_Rotated_BRIEF", str_t, "ORB" , "")], "")
info = "Feature Type Used for Point Correspondences"
feature_manager.add("feature_type", str_t, 0, info, "GFTT", edit_method=type_enum)

pair_enum = gen.enum([ gen.const("Lucas_Kanade", str_t, "LK", ""),
                       gen.const("Brute_Force",  str_t, "BF", "")], "")
info = "Matching Method Used for Point Correspondences"
feature_manager.add("matching_method", str_t, 0, info, "LK", edit_method=pair_enum)

info = "Maximum Number of Features to Pair"
feature_manager.add("max_points", int_t, 0, info, 0, 20, 3000)
# info = "Corner Quality Requirement for GFTT"
# feature_manager.add("corner_quality", double_t, 0, info, 0, 0, 3000)

# feature_manager.add("COURSE_KD", double_t, 0, info, 0, -1, 0)
# feature_manager.add("COURSE_KI", double_t, 0, info, 0, 0, 0.2)





# source_features
source_features = gen.add_group("Source_Feature_Outliers")
source_features.add("minimum_pixel_velocity", double_t, 0, "Minimum Pixel Velocity", 0, 0, 2)
source_features.add("maximum_pixel_velocity", double_t, 0, "Maximum Pixel Velocity", 0, 0, 10)



exit(gen.generate(PACKAGE, "visual_frontend", "visual_frontend"))