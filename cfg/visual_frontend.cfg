#!/usr/bin/env python
PACKAGE = "visual_mtt2"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# INSTRUCTIONS
# Don't use this to set default values. Use yaml files, loaded in launch files.
# This cfg specifies which params are dynamically reconfigurable along with
# bounds. The reconfigure callback needs to recieve these and assign them to
# overwrite the class members.

# entries decoded:
# group.add("strict_param_name", type, level, "Mouseover Description", default, min, max)

# homography
homography = gen.add_group("Homography")
description = "Homography RANSAC Inlier Threshold"
homography.add("reprojection_error", double_t, 0, description, 0, 0, 5)

# source_features
source_features = gen.add_group("Source Feature Outliers")
source_features.add("minimum_pixel_velocity", double_t, 0, "Minimum Pixel Velocity", 0, 0, 2)
source_features.add("maximum_pixel_velocity", double_t, 0, "Maximum Pixel Velocity", 0, 0, 10)

# course hold
# course = gen.add_group("Course")
# course.add("COURSE_KP", double_t, 0, "Course proportional gain", 0.7329, 0, 2)
# course.add("COURSE_KD", double_t, 0, "Course derivative gain", 0, -1, 0)
# course.add("COURSE_KI", double_t, 0, "Course integral gain", 0.07, 0, 0.2)

# enum example
# size_enum = gen.enum([ gen.const("Small",      int_t, 0, "A small constant"),
#                        gen.const("Medium",     int_t, 1, "A medium constant"),
#                        gen.const("Large",      int_t, 2, "A large constant"),
#                        gen.const("ExtraLarge", int_t, 3, "An extra large constant")],
#                      "An enum to set size")
# gen.add("size", int_t, 0, "A size parameter which is edited via an enum", 1, 0, 3, edit_method=size_enum)

exit(gen.generate(PACKAGE, "visual_frontend", "visual_frontend"))