#pragma once

#include <common/gpu.h>
#include <opencv2/opencv.hpp>
#include <Eigen/Dense>
#include <rransac/tracker.h>

#include <common/opencv_compat.h>

namespace common {


/** \struct Measurements
* \brief A structure that contains measurement data.
* \detail When a measurement source plugin generates measurements, the data
* is organized as an object type Measurements that stores all
* the information that RRANSAC needs.
*/

struct Measurements {

  std::vector<cv::Point2f> meas_pos; /**< The 2D position of the measurement in undistorted normalized image pixel coordinates.*/
  std::vector<cv::Point2f> meas_vel; /**< The 2D velocity of the measurement in undistorted normalized image pixel coordinates.*/
  int id;                            /**< The measurement source id. See visual_frontend::MeasurementBase for more information. */
  bool has_velocity;                 /**< Indicates if the measurement source also measures velocity. */
  int num_of_measurements;           /**< Number of measurements generated from a measurement source in one iteration. */

};

/** \class System
 * \brief Handles all the data needed for the different managers, plugins, visual_frontend::VisualFrontend, and RRANSAC.
 * \detail Handles all the data needed for the different managers and plugins and provides basic methods to 
 * facilitate the exchange and sharing of data between different managers, plugins, RRANSAC, and visual_frontend::VisualFrontend.
 * All plugins have access to the data, but cannot write to it. This is to prevent a plugin from changing
 * data that they shouldn't. The managers act at the gate keepers of writing information from the plugins to System so that it 
 * can be shared with the rest of the program.
 */

class System {

  public:

  System();
  ~System();

  /**
  * \breif Sets System::hd_frame_.
  * @param hd_frame is the new unaltered image.
  * @see System::hd_frame_
  */
  void SetHDFrame(const cv::Mat& hd_frame);

  /**
  * \breif Sets System::resize_scale_.
  * @param resize_scale scales the current hd_frame.
  * @see System::resize_scale_
  */
  void SetResizeScale(const double resize_scale);

  /**
  * \breif Sets System::sd_frame_.
  * Resizes common::System::hd_frame_ System::resize_scale_.
  * @see System::resize_scale_
  * @see System::hd_frame_
  */
  void SetSDFrame();

  /**
  * \breif Sets System::hd_camera_matrix_ and System::dist_coeff_.
  * @param K is the camera matrix.
  * @param D is the distortion coefficients.
  * @see System::hd_camera_matrix_
  * @see System::dist_coeff_
  */
  void SetCameraParams(const cv::Mat& K, const cv::Mat& D);

  /**
  * \breif Sets System::sd_camera_matrix_.
  * \detial This is called whenever the size of System::sd_frame_ changes.
  * When the size changes, the System::undistorted_region_mask_
  * needs to be updated according to the new size. To do this
  * it calls the member method System::SetUndistortedRegionMask().
  * @see System::sd_camera_matrix_
  * @see System::SetUndistortedRegionMask()
  */
  void SetScaledCameraParams();

  /**
  * \breif  Sets System::undistorted_region_mask_.
  * \detial This method is called by System::SetScaledCameraParams()
  * whenever the size of System::sd_frame_ changes to update 
  * the new undistroted region mask.
  * @see System::undistorted_region_mask_
  */
  void SetUndistortedRegionMask();

  /**
  * \breif Clears several flags by setting them to false. 
  * \detial Clears System::good_features_, System::good_transform_, and System::good_measurements_.
  * @see System::good_features_
  * @see System::good_transform_
  * @see System::good_measurements_
  */
  void ClearFlags();

  //////////////////////////////////////////////////////////////////////////////////////
  // Feature Manager
  //////////////////////////////////////////////////////////////////////////////////////

  /**
  * 
  * \detail This method is called by visual_frontend::FeatureManager at the beginning
  * of each iteration to empty the contents of System::d_prev_matched_, System::d_curr_matched_,
  * System::ud_prev_matched_, and System::ud_curr_matched_. 
  * @see System::d_prev_matched_
  * @see System::d_curr_matched_
  * @see System::ud_prev_matched_
  * @see System::ud_curr_matched_
  * @see visual_frontend::FeatureManager::FindCorrespondences(common::System& sys)
  */
  void ClearMatchedFeatures();

  /**
  * 
  * \detail This method is called by visual_frontend::FeatureManager to add undistorted
  * matched features, generated by feature plugins, to System::d_prev_matched_, and 
  * System::d_curr_matched_.
  * @param d_prev_matched The matched features of the previous frame.
  * @param d_curr_matched The matched features of the current frame. 
  * @see System::d_prev_matched_
  * @see System::d_curr_matched_
  * @see visual_frontend::FeatureManager::FindCorrespondences(common::System& sys)
  */
  void AddMatchedFeatures(const std::vector<cv::Point2f>& d_prev_matched, const std::vector<cv::Point2f>& d_curr_matched);
  
  /**
  * 
  * \detail This method is called by visual_frontend::FeatureManager to undistort
  * the matched features (System::d_prev_matched_, System::d_curr_matched_)
  * and project them onto the normalized image plane. The undistorted and
  * normalized features are stored in System::ud_prev_matched_ and
  * System::ud_curr_matched_.
  * @see System::ud_prev_matched_
  * @see System::ud_curr_matched_
  * @see visual_frontend::FeatureManager::FindCorrespondences(common::System& sys)
  */
  void UndistortMatchedFeatures();

  /**
  * 
  * \detail This method is called by visual_frontend::FeatureManager to set
  * the flag System::good_features_.
  * @param good_features Flag indicates if the features are good.
  * @see System::good_features_
  * @see visual_frontend::TransformManager::CalculateTransform(common::System& sys).
  * @see visual_frontend::FeatureManager::FindCorrespondences(common::System& sys)
  */
  void SetFeatureFlag(const bool& good_features);

  //////////////////////////////////////////////////////////////////////////////////////
  // Transform Manager
  //////////////////////////////////////////////////////////////////////////////////////

  /**
  * 
  * \detail This method is called by visual_frontend::TransformManager at
  * the beginning of each iteration to set System::transform_ 
  * to the identity matrix.
  * @see System::transform_
  * @see visual_frontend::TransformManager::CalculateTransform(common::System& sys)
  */
  void ClearTransform();

  /**
  * 
  * \detail This method is called by visual_frontend::TransformManager once
  * a valid transform has been found. It sets System::transform_.
  * @param transform Transform generated from a Transform Method Plugin.
  * @see System::transform_
  * @see visual_frontend::TransformManager::CalculateTransform(common::System& sys)
  */
  void SetTransform(const cv::Mat& transform);

  /**
  * 
  * \detail This method is called by visual_frontend::TransformManager to
  * indicate if a good transform was found. It sets the flag System::good_transform_.
  * @param good_transform Flag indicates if the transform is good.
  * @see System::good_transform_
  * @see visual_frontend::TransformManager::CalculateTransform(common::System& sys)
  */
  void SetTransformFlag(const bool& good_transform);

  //////////////////////////////////////////////////////////////////////////////////////
  // Measurment Manager
  //////////////////////////////////////////////////////////////////////////////////////

  /**
  * 
  * \detail This method is called by visual_frontend::MeasurementManager at
  * the beginning of each iteration to clear System::measurements_.
  * @see System::measurements_
  * @see visual_frontend::MeasurementManager::GenerateMeasurements(common::System& sys)
  */
  void ClearMeasurements();

  /**
  * 
  * \detail This method is called by visual_frontend::MeasurementManager when
  * a Measurement Source Plugin generates measurements. These measurements
  * are added to System::measurements_.
  * @param id The Measurement Source Plugin's unique ID.
  * @param has_velocity Indicates if the Measurement Source Plugin generated velocity measurements (meas_vel)
  * @param meas_pos The 2D position of the measurement in undistorted normalized image pixel coordinates.
  * @param meas_vel The 2D velocity of the measurement in undistorted normalized image pixel coordinates.
  * @see visual_frontend::MeasurementBase::id_
  * @see visual_frontend::MeasurementBase::has_velocity_
  * @see common::Measurements::meas_pos
  * @see common::Measurements::meas_vel
  * @see visual_frontend::MeasurementManager::GenerateMeasurements(common::System& sys)
  */
  void AddMeasurements(const int id,
                       const bool has_velocity, 
                       const std::vector<cv::Point2f>& meas_pos, 
                       const std::vector<cv::Point2f>& meas_vel);

  /**
  * 
  * \detail This method is called by visual_frontend::MeasurementManager 
  * to indicate if any measurements were generated. This method
  * sets the flag System::good_measurements_ 
  * @see System::good_measurements_
  * @see visual_frontend::MeasurementManager::GenerateMeasurements(common::System& sys)
  */
  void SetMeasurementFlag(const bool& good_measurements);

/**< */

  // Feature Manager
  std::vector<cv::Point2f> d_prev_matched_;  /**< Distorted matched features from the previous frame. @see visual_frontend::FeatureManager.*/
  std::vector<cv::Point2f> d_curr_matched_;  /**< Distorted matched features from the current frame. @see visual_frontend::FeatureManager.*/
  std::vector<cv::Point2f> ud_prev_matched_; /**< Undistorted and normalized matched features from the previous frame. @see visual_frontend::FeatureManager.*/
  std::vector<cv::Point2f> ud_curr_matched_; /**< Undistorted and normalized matched features from the current frame. @see visual_frontend::FeatureManager.*/
  bool good_features_;                       /**< Flag used to indicate that there are enough matched features to calculate a transform. @see visual_frontend::FeatureManager.*/              

  // Transform Manager
  cv::Mat transform_;                        /**< The transformation between the previous image and the current image. @see visual_frontend::TransformManager.*/
  bool good_transform_;                      /**< Flag used to indicate that the tranformation is good. @see visual_frontend::TransformManager.*/

  // Measurement Manager
  std::vector<Measurements> measurements_;   /**< Measurements produced by the Measurement sources. @see common::Measurements and visual_frontend::MeasurementManager. */
  int num_of_measurements_;                  /**< Total number of measurements produced by all of the measurement sources in one iteration. @see visual_frontend::MeasurementManager.*/
  bool good_measurements_;                   /**< Flag used to indicate if there are any measurements. @see visual_frontend::MeasurementManager.*/

  // R-RANSAC
  std::vector<rransac::core::ModelPtr> tracks_; /**< Container for all the track (Good Models) computed by R-RANSAC.*/

  ////////////////////////////////////////////////////////////////////////
  // Visual Frontend
  // Images, camera info, and mask
  cv::Mat hd_frame_;                         /**< The unaltered image of the current frame. */ 
  cv::Mat sd_frame_;                         /**< Resized common::System::hd_frame_ image by common::System::resize_scale_. */
  cv::Size sd_res_;                          /**< The image size of common::System::sd_frame_. */
  cv::Mat hd_camera_matrix_;                 /**< The intrinsic camera parameter's of common::System::hd_frame_. */
  cv::Mat sd_camera_matrix_;                 /**< The intrinsic camera parameter's of common::System::sd_frame_. */
  cv::Mat dist_coeff_;                       /**< The camera's distortion coefficients. */
  cv::Mat undistorted_region_mask_;          /**< Marks the region in System::sd_frame_ that is not removed when undistorted. When an
                                                  image is undistorted, parts of the image's border are removed if they extend beyond the original
                                                  size of the image. This mask indicates the region of the distorted image that will not be removed
                                                  when undistorted. */  
  double resize_scale_;                      /**< common::System::hd_frame_ is resized by this parameter to make common::System::sd_frame_. */ 
  bool cam_info_received_;                   /**< Flag used to indicate if camera information has been recieved. The camera information is used
                                                  to create common::System::hd_camera_matrix_ and common::System::dist_coeff_*/
  
  bool tuning_;                              /**< Flag used to indicate if the plugins should generate images to help with debuggin or tunning. */

  int message_output_period_;                   /**< Print a ROS message at most once per "text_output_period_" */

  private:

};


}