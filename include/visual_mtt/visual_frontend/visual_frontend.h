#pragma once

// libraries
#include <iostream>
#include <chrono>
#include <thread>
#include <memory>

#include <ros/ros.h>
#include <ros/console.h>
#include <Eigen/Dense>
#include <opencv2/opencv.hpp>
#include <opencv2/core/eigen.hpp>
#include <cv_bridge/cv_bridge.h>
#include <dynamic_reconfigure/server.h>
#include <image_transport/image_transport.h>






// common
#include "common/params.h"
#include "common/system.h"

// dynamic reconfig
#include "visual_mtt/rransacConfig.h"
#include "visual_mtt/visual_frontendConfig.h"

// messages
#include "visual_mtt/Track.h"
#include "visual_mtt/Tracks.h"
#include "sensor_msgs/Image.h"
#include "std_msgs/Float32MultiArray.h"

// key algorithm members
#include "feature_manager/feature_manager.h"
#include "transform_manager/transform_manager.h"
#include "measurement_manager/measurement_manager.h"
#include "recognition_manager/recognition_manager.h"

namespace visual_frontend {

  /** \class VisualFrontend
  * \brief This is the frontend to Visual_MTT. 
  * \details It Loads all of the parameters, set's up all of the
  * managers (FeatureManager, TransformManager, MeasurementManager)
  * and ROS callbacks to get video data and dynamic parameter updates. 
  * When a new frame is received, it calls all of the managers in order
  * to generate measurements that are fed into RRANSAC. RRANSAC returns
  * updated trans that VisualFrontend publishes via ROS.
  *
  * \authors { Parker Lusk, Jeff Millard, Mark Petersen }
  */

  class VisualFrontend
  {
  public:


    /**
    * \brief Sets up all of the managers, ROS communication, 
    * and loads static parameters.
    */
    VisualFrontend();

  private:

    /**
    * \brief The core callback function.
    * \details When a new frame is received for the first time, the camera
    * matirx and distortion coefficients are set in the common::System object.
    * On every VisualFrontend::frame_stride_ iteration, the managers are
    * called to generate measurements that are fed into RRANSAC.
    * This method also calculates utilization of each manager where
    * utilization = t_computation / t_available *100.
    * @param data The new frame
    * @param cinfo The camera matrix and distortion coefficients.
    */
    void CallbackVideo(const sensor_msgs::ImageConstPtr& data, const sensor_msgs::CameraInfoConstPtr& cinfo);

    /**
    * \detail Called when a visual_frontend dynamic parameter is changed.
    * It updates the dynamic parameters in VisualFrontend, all 
    * managers, and all loaded plugins by calling SetParameters(visual_mtt::visual_frontendConfig& config)
    * @param config Constains visual_frontend's dynamic parameters.
    * @see VisualFrontend::SetParameters(visual_mtt::visual_frontendConfig& config)
    * @see FeatureManager::SetParameters(visual_mtt::visual_frontendConfig& config)
    * @see TransformManager::SetParameters(visual_mtt::visual_frontendConfig& config)
    * @see MeasurementManager::SetParameters(visual_mtt::visual_frontendConfig& config)
    */
    void CallbackReconfigure(visual_mtt::visual_frontendConfig& config, uint32_t level);

    /**
    * \detail Called when a RRANSAC dynamic parameter is changed.
    * @param config Constains RRANSAC's dynamic parameters.
    */
    void CallbackReconfigureRransac(visual_mtt::rransacConfig& config, uint32_t level);

     /**
    * \detail Called by VisualFrontend::CallbackReconfigure(visual_mtt::visual_frontendConfig& config, uint32_t level)
    * to update VisualFrontend and common::System dynamic parameters.
    * @param config Constains visual_frontend's dynamic parameters.
    */
    void SetParameters(visual_mtt::visual_frontendConfig& config);

    /**
    * \brief Publish the tracks in ROS that were generated by RRANSAC
    * @param tracks Tracks generated by R-RANSAC.
    */
    void PublishTracks(const std::vector<RR_Model*> tracks);

    /**
    * \brief Publish common::System::Transform_ in ROS.
    */
    void PublishTransform();

    /**
    * \brief Draw tracks over the original frame and publish them
    * in ROS.
    * @param tracks Tracks generated by R-RANSAC.
    */
    cv::Mat DrawTracks();

    /**
    * \brief Feeds R-RANSAC the measurements generated by
    * Measurement Method Plugins.
    */
    void UpdateRRANSAC();


    // ROS
    ros::NodeHandle nh_;
    image_transport::CameraSubscriber sub_video;
    ros::Publisher  pub_tracks;
    image_transport::CameraPublisher pub_tracks_video;
    ros::Publisher  pub_transform_;  

    // dynamic reconfigure server and service client for R-RANSAC params
    dynamic_reconfigure::Server<visual_mtt::visual_frontendConfig> server_;
    std::unique_ptr<dynamic_reconfigure::Server<visual_mtt::rransacConfig>> rransac_server_;

    // algorithm managers
    FeatureManager     feature_manager_;
    TransformManager   transform_manager_;
    MeasurementManager measurement_manager_;
    RecognitionManager recognition_manager_;

  // Recursive-RANSAC Tracker



    RR_RRANSAC rransac_; /**< RRANSAC is a multiple target tracking algorithm. */
    rransac::Parameters rransac_params_;              /**< The parameters needed for RRANSAC. */
    const RR_System* rransac_sys_; /**< A constant pointer to all of the data of RRANSAC. */


    std::vector<cv::Point2f> corner_{{0,0}};
    std::vector<cv::Scalar> colors_;

    // Common
    common::Params static_params_;     /**< Object to access loaded static parameters. */
    common::System sys_;               /**< Object that handles all of the shared data 
                                            between Managers, Plugins, and VisualFrontend. */

    // Low-pass filter for fps and utilization
    visual_mtt::Utilization util_;     /**< Stores utilization values. @see VisualFrontend::CallbackVideo(const sensor_msgs::ImageConstPtr& data, const sensor_msgs::CameraInfoConstPtr& cinfo)*/
    double fps_             = 30;      /**< Stores frames per second. @see VisualFrontend::CallbackVideo(const sensor_msgs::ImageConstPtr& data, const sensor_msgs::CameraInfoConstPtr& cinfo) */
    double alpha_           = 0.003;   /**< fps filter: large time constant ~10s */
    double time_constant_   = 1.0;     /**< utilization filter: chose time constant */
    double t_other_         = 0.0;     /**< Utilization time from general processing */

    // Saved frame headers, received at each callback
    std_msgs::Header header_frame_;
    int frame_ = 0;                    /**< Number of frames received during runtime. */
    int pub_frame_ = 0;                /**< Number of frames that have been published. */

    // Tracks Publisher
    int iter_num_ = 0;                 /**< The number of times tracks has been to ROS */
    double pub_scale_ = 1;             /**< Used to resize the track's image. @see VisualFrontend::DrawTracks(const std::vector<rransac::core::ModelPtr>& tracks)*/
    double text_scale_ = 1;            /**< Used to resize the text drawn in the track's image. @see VisualFrontend::DrawTracks(const std::vector<rransac::core::ModelPtr>& tracks)*/

    unsigned int frame_stride_;        /**< Only process every `frame_stride_` frames */

    double RRANSAC_gate_threshold_ = 0;       /**< The gating threshold used by RRANSAC. It is position based, so any measurement within this radius to a track 
                                            will be associated with the track. */

    unsigned int publish_frame_stride_; /**< Only publish the tracks image every frame_stride_ * publish_frame_stride_ frame */


    /**
    * < Struct containing the necessary information to save an image.
    * @see common::PictureParams
    */
    common::PictureParams pic_params_;
    std::string name_; /**< A unique identifier for the frontend. Should be initialized in the constructor.*/   
    bool drawn_;       /**< Indicates if an image has been drawn yet  */

  };

}
